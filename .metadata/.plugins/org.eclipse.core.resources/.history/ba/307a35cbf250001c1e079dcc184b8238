package GUI;

import java.awt.EventQueue;

import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import javax.swing.JButton;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;

import Arrays.ArrayAlumno;
import Clases.Alumno;

import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.ImageIcon;

public class MantAlumnoAdicionar extends JInternalFrame {
	private JLabel lblNewLabel;
	private JLabel lblNewLabel_1;
	private JLabel lblNewLabel_2;
	private JLabel lblNewLabel_3;
	private JLabel lblNewLabel_4;
	private JLabel lblNewLabel_5;
	private JLabel lblNewLabel_6;
	private JTextField text_Codigo;
	private JTextField text_Nombre;
	private JTextField text_Apellido;
	private JTextField text_DNI;
	private JTextField text_Edad;
	private JTextField text_Celular;
	private JTable table;
	private JButton btn_Adicionar;
	private JScrollPane scrollPane;
	private DefaultTableModel modelo;
	private JLabel lblNewLabel_8;
	private JTextField text_Estado;
	
	// 	Variables globoterráqueos
	/*	None	*/
	
	//	Arreglo terráqueo
	ArrayAlumno AA = new ArrayAlumno();
	private JLabel lblNewLabel_9;
	private JLabel lblNewLabel_10;
	
	
	//	Clase terráquea
	/*	Waiting	*/
	
	
	
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					MantAlumnoAdicionar frame = new MantAlumnoAdicionar();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public MantAlumnoAdicionar() {
		setTitle("Mantenimiento Alumno Adicionar");
		setIconifiable(true);
		setMaximizable(true);
		setClosable(true);
		setBorder(null);
		setBounds(100, 100, 620, 600);
		getContentPane().setLayout(null);
		{
			lblNewLabel = new JLabel("Adicionar Alumno");
			lblNewLabel.setFont(new Font("Consolas", Font.BOLD, 15));
			lblNewLabel.setBounds(107, 40, 150, 26);
			getContentPane().add(lblNewLabel);
		}
		{
			lblNewLabel_1 = new JLabel("Codigo\r\n");
			lblNewLabel_1.setFont(new Font("Tahoma", Font.PLAIN, 12));
			lblNewLabel_1.setBounds(44, 107, 69, 15);
			getContentPane().add(lblNewLabel_1);
		}
		{
			lblNewLabel_2 = new JLabel("Nombre");
			lblNewLabel_2.setFont(new Font("Tahoma", Font.PLAIN, 12));
			lblNewLabel_2.setBounds(44, 141, 69, 15);
			getContentPane().add(lblNewLabel_2);
		}
		{
			lblNewLabel_3 = new JLabel("Apellido");
			lblNewLabel_3.setFont(new Font("Tahoma", Font.PLAIN, 12));
			lblNewLabel_3.setBounds(359, 142, 69, 15);
			getContentPane().add(lblNewLabel_3);
		}
		{
			lblNewLabel_4 = new JLabel("DNI");
			lblNewLabel_4.setFont(new Font("Tahoma", Font.PLAIN, 12));
			lblNewLabel_4.setBounds(44, 180, 69, 15);
			getContentPane().add(lblNewLabel_4);
		}
		{
			lblNewLabel_5 = new JLabel("Edad");
			lblNewLabel_5.setFont(new Font("Tahoma", Font.PLAIN, 12));
			lblNewLabel_5.setBounds(359, 181, 69, 15);
			getContentPane().add(lblNewLabel_5);
		}
		{
			lblNewLabel_6 = new JLabel("Celular");
			lblNewLabel_6.setFont(new Font("Tahoma", Font.PLAIN, 12));
			lblNewLabel_6.setBounds(44, 217, 69, 15);
			getContentPane().add(lblNewLabel_6);
		}
		{
			text_Codigo = new JTextField();
			text_Codigo.setEditable(false);
			text_Codigo.setBounds(123, 108, 140, 19);
			getContentPane().add(text_Codigo);
			text_Codigo.setColumns(10);
			
			//	Agregamos el codigo correlativo por default
			text_Codigo.setText(AA.codigoCorrelativo());
		}
		{
			text_Nombre = new JTextField();
			text_Nombre.addKeyListener(new KeyAdapter() {
				@Override
				public void keyTyped(KeyEvent e) {
					keyTypedText_Nombre(e);
				}
			});
			text_Nombre.setColumns(10);
			text_Nombre.setBounds(123, 142, 140, 19);
			getContentPane().add(text_Nombre);
		}
		{
			text_Apellido = new JTextField();
			text_Apellido.addKeyListener(new KeyAdapter() {
				@Override
				public void keyTyped(KeyEvent e) {
					keyTypedText_Apellido(e);
				}
			});
			text_Apellido.setColumns(10);
			text_Apellido.setBounds(426, 143, 140, 19);
			getContentPane().add(text_Apellido);
		}
		{
			text_DNI = new JTextField();
			text_DNI.addKeyListener(new KeyAdapter() {
				@Override
				public void keyTyped(KeyEvent e) {
					keyTypedText_DNI(e);
				}
			});
			text_DNI.setColumns(10);
			text_DNI.setBounds(123, 181, 140, 19);
			getContentPane().add(text_DNI);
		}
		{
			text_Edad = new JTextField();
			text_Edad.addKeyListener(new KeyAdapter() {
				@Override
				public void keyTyped(KeyEvent e) {
					keyTypedText_Edad(e);
				}
			});
			text_Edad.setColumns(10);
			text_Edad.setBounds(426, 182, 140, 19);
			getContentPane().add(text_Edad);
		}
		{
			text_Celular = new JTextField();
			text_Celular.addKeyListener(new KeyAdapter() {
				@Override
				public void keyTyped(KeyEvent e) {
					keyTypedText_Celular(e);
				}
			});
			text_Celular.setColumns(10);
			text_Celular.setBounds(123, 218, 140, 19);
			getContentPane().add(text_Celular);
		}
		{
			scrollPane = new JScrollPane();
			scrollPane.setBounds(42, 308, 524, 213);
			getContentPane().add(scrollPane);
			{
				table = new JTable();
				table.setFillsViewportHeight(true);
				scrollPane.setViewportView(table);
			}
		}
		{
			btn_Adicionar = new JButton("Adicionar");
			btn_Adicionar.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					actionPerformedBtn_Adicionar(e);
				}
			});
			btn_Adicionar.setBounds(255, 267, 100, 21);
			getContentPane().add(btn_Adicionar);
		}
		{
			lblNewLabel_8 = new JLabel("Estado");
			lblNewLabel_8.setFont(new Font("Tahoma", Font.PLAIN, 12));
			lblNewLabel_8.setBounds(359, 219, 69, 15);
			getContentPane().add(lblNewLabel_8);
		}
		{
			text_Estado = new JTextField();
			text_Estado.setEditable(false);
			text_Estado.setText(AA.FijamosEstado() + "");
			text_Estado.addKeyListener(new KeyAdapter() {
				@Override
				public void keyTyped(KeyEvent e) {
					keyTypedText_Estado(e);
				}
			});
			text_Estado.setColumns(10);
			text_Estado.setBounds(426, 216, 140, 19);
			getContentPane().add(text_Estado);
		}
		
			// Hacemos el Default de la Tabla
		modelo = new DefaultTableModel();
		modelo.addColumn("Codigo");
		modelo.addColumn("Nombre");
		modelo.addColumn("Apellido");
		modelo.addColumn("DNI");
		modelo.addColumn("Edad");
		modelo.addColumn("Celular");
		modelo.addColumn("Estado");
		table.setModel(modelo);
		{
			lblNewLabel_9 = new JLabel("");
			lblNewLabel_9.setIcon(new ImageIcon(MantAlumnoAdicionar.class.getResource("/imagenes/132womanstudent2_100407.png")));
			lblNewLabel_9.setBounds(380, 22, 48, 82);
			getContentPane().add(lblNewLabel_9);
		}
		{
			lblNewLabel_10 = new JLabel("");
			lblNewLabel_10.setIcon(new ImageIcon(MantAlumnoAdicionar.class.getResource("/imagenes/130manstudent2_100617.png")));
			lblNewLabel_10.setBounds(465, 22, 48, 82);
			getContentPane().add(lblNewLabel_10);
		}
		MostramosTabla();
	}
	
	//	Metodo Solo Numeros
	void SoloNumeros (KeyEvent e) {
		char caracter = e.getKeyChar();
		if (!(Character.isDigit(caracter))) {
			getToolkit();
			e.consume();
		}
	}
	
		//	Metodo Solo Letras
	void SoloLetras (KeyEvent e) {
		char caracter = e.getKeyChar();
		if (!(Character.isLetter(caracter) || caracter == e.VK_SPACE)) {
			getToolkit();
			e.consume();
		}
	}
		//	No caracteres especiales
	void NoEspeciales (KeyEvent e) {
		char caracter = e.getKeyChar();
		if (!(Character.isLetter(caracter) || Character.isDigit(caracter))) {
			getToolkit();
			e.consume();
		}
	}
	
		//	Metodo para no exceder los digitos
	void BorrandoDigitos (KeyEvent e,int field) {
		switch (field) {
			case 3: 
				if(text_DNI.getText().length() >= 8)
			        e.consume();
						break;
			case 4: 
				if(text_Celular.getText().length() >= 9)
			        e.consume();
						break;
			case 5: 
				if(text_Seccion.getText().length() >= 4)
			        e.consume();
						break;
			case 7: 
				if(text_Edad.getText().length() >= 2)
			        e.consume();
						break;
			case 8: 
				if(text_Estado.getText().length() >= 1)
			        e.consume();
						break;
		}
	}
	
		//	Validando Nombre
	protected void keyTypedText_Nombre(KeyEvent e) {
		SoloLetras(e);
	}
	
		// Validando DNI
	protected void keyTypedText_DNI(KeyEvent e) {
		SoloNumeros(e);
		BorrandoDigitos(e, 3);
	}
	
		//	Validando Celular
	protected void keyTypedText_Celular(KeyEvent e) {
		SoloNumeros(e);
		BorrandoDigitos(e, 4);
	}
	
		//	Validando Apellido
	protected void keyTypedText_Apellido(KeyEvent e) {
		SoloLetras(e);
	}
	
		//	Validando Edad
	protected void keyTypedText_Edad(KeyEvent e) {
		SoloNumeros(e);
		BorrandoDigitos(e, 7);
	}

		//	Validando Estado
	protected void keyTypedText_Estado(KeyEvent e) {
		SoloNumeros(e);
		BorrandoDigitos(e, 8);
	}
	
		//	Metodos Leer
	String LeerString(JTextField text) {
		return text.getText().trim();
	}
	
	int LeerEntero(JTextField text) {
		return Integer.parseInt(text.getText().trim());
	}
	
		// Metodo Error
	void Error(String x, JTextField text) {
		JOptionPane.showMessageDialog(this, "No rellenaste el campo: " + x, "ERROR", 0);
		text.setText("");
		text.requestFocus();
	}
	
		//	Metodo Si Existe
	void SiExiste(String x, JTextField text) {
		JOptionPane.showMessageDialog(this, "Ya existe un alumno con el DNI: " + x, "ERROR", 0);
		text.requestFocus();
	}
	
		//	Metodo Fijamos Estado
	int FijamosEstado() {
		return 0;
	}
	
		// Metodo Limpiar
	void Limpiar() {
		text_Codigo.setText(AA.codigoCorrelativo());
		text_Nombre.setText("");
		text_Apellido.setText("");
		text_DNI.setText("");
		text_Edad.setText("");
		text_Celular.setText("");
	}
	
	
		// Metodo Mostramos el Alumno en la Tabla
	void MostramosTabla() {
		modelo.setRowCount(0);
		for (int i  = 0; i < AA.tamanio(); i++) {
			Object [] fila = {
					AA.obtener(i).getCodAlumno(),
					AA.obtener(i).getNombres(),
					AA.obtener(i).getApellidos(),
					AA.obtener(i).getDni(),
					AA.obtener(i).getEdad(),
					AA.obtener(i).getCelular(),
					AA.obtener(i).getEstado(),
			};
			modelo.addRow(fila);
		}
	}
	
		//	Metodo Adicionar Alumno
	void AdicionamosAlumno (String Nombre, String Apellido, String DNI, int Edad, int Celular, int Estado) {
		Alumno nuevo = new Alumno(AA.codigoCorrelativo(), Nombre, Apellido, DNI, Edad, Celular, Estado);
		AA.adicionar(nuevo);
		MostramosTabla();
		Limpiar();
	}
	
		//	Metodo Leer Datos Completos
	void LeerDatosCompletos() {
		String Nombre = LeerString(text_Nombre);
		if (Nombre.length() != 0) {
			String Apellido = LeerString(text_Apellido);
			if (Apellido.length() != 0) {
				String DNI = LeerString(text_DNI);
				if (DNI.length() != 0) {
					if (AA.buscarDNI(DNI) == null) {
						try {
							int Edad = LeerEntero(text_Edad);
							if (Edad != 0) {
								try {
									int Celular = LeerEntero(text_Celular);
									if (Celular > 900000000) {
										try {
											//int Estado = LeerEntero(text_Estado);
											int Estado = FijamosEstado();
											try {
												AdicionamosAlumno(Nombre, Apellido, DNI, Edad, Celular, Estado);
											}
											catch (Exception e1) {}
										}
										catch (Exception e1) {
											Error("ESTADO", text_Estado);
										}
									}
									else {
										JOptionPane.showMessageDialog(this, "El CELULAR no es correcto");
										text_Celular.requestFocus();
									}
								}
								catch (Exception e1) {
									Error("CELULAR", text_Celular);
								}
							}
						}
						catch (Exception e1) {
							Error("EDAD", text_Edad);
						}
					}
					else {
						SiExiste(DNI, text_DNI);
					}
				}
				else {
					Error("DNI", text_DNI);
				}
			}
			else {
				Error("Apellido", text_Apellido);
			}
		}
		else {
			Error("NOMBRE", text_Nombre);
		}
	}
		
		//	Metodo Procesar Adicionar
	void ProcesarAdicionar() {
		LeerDatosCompletos();
	}
	
		//	Btn Adicionar
	protected void actionPerformedBtn_Adicionar(ActionEvent e) {
		ProcesarAdicionar();
	}
}
